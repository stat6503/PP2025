[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python프로그래밍",
    "section": "",
    "text": "본 강의에서는 파이썬을 이용한 프로그래밍 방법을 학습하고, 데이터 분석에 필수적인 몇 가지 패키지를 소개한다.\n또한 클래스와 객체지향적 프로그래밍의 개념을 설명한다."
  },
  {
    "objectID": "index.html#강의-소개",
    "href": "index.html#강의-소개",
    "title": "Python프로그래밍",
    "section": "",
    "text": "본 강의에서는 파이썬을 이용한 프로그래밍 방법을 학습하고, 데이터 분석에 필수적인 몇 가지 패키지를 소개한다.\n또한 클래스와 객체지향적 프로그래밍의 개념을 설명한다."
  },
  {
    "objectID": "index.html#학습-평가",
    "href": "index.html#학습-평가",
    "title": "Python프로그래밍",
    "section": "학습 평가",
    "text": "학습 평가\n\n중간 30%, 기말 40%, 출석 10%, 과제 20%\n결석 1회 1점 감점, 지각 3회 1점 감점(1/4 이상 결석하면 F학점)"
  },
  {
    "objectID": "index.html#설문조사",
    "href": "index.html#설문조사",
    "title": "Python프로그래밍",
    "section": "설문조사",
    "text": "설문조사\n\nPython 프로그래밍에 대한 기초적인 이해도와 경험을 파악하기 위해 설문조사를 실시함\n25-1 Python프로그래밍 사전 설문조사"
  },
  {
    "objectID": "index.html#문의",
    "href": "index.html#문의",
    "title": "Python프로그래밍",
    "section": "문의",
    "text": "문의\n\nE-mail: stat6503@gmail.com\nLMS는 파일 제출용으로만 사용하니 쪽지 보내지 말 것"
  },
  {
    "objectID": "index.html#참고문헌",
    "href": "index.html#참고문헌",
    "title": "Python프로그래밍",
    "section": "참고문헌",
    "text": "참고문헌\n\n실생활 융합 예제로 배우는 파이썬 마스터 / 김종훈, 김동건 / 2025 / 한빛아카데미\nwebsite : 점프 투 파이썬"
  },
  {
    "objectID": "2_2_conditional.html",
    "href": "2_2_conditional.html",
    "title": "2. Python 기초",
    "section": "",
    "text": "프로그램 구조는 크게 순차 구조, 선택 구조, 반복 구조로 구분됨\n\n순차 구조 : 위에서부터 아래로 순차적으로 실행되는 구조\n선택 구조 : 조건에 따라 문장을 선택적으로 실행하는 구조로, 조건이 참(True)인지 거짓(False)인지에 따라 실행되는 문장이 달라짐\n반복 구조 : 임의의 문장을 반복해서 실행하는 구조\n\n\n\n\n\n\n\n\n\nif 조건식:  　　문장\n\n\n조건식이 참이면 문장을 실행하고 거짓이면 문장을 실행하지 않음\n조건식 오른쪽에 :이 위치하고, 참인 경우 실행될 문장은 반드시 들여쓰기(indentation)해야 함\n\n\n\n\n# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력\nimport random\na = random.randint(1, 100)\nb = random.randint(1, 100)\n\nif a&lt;b:\n    a, b = b, a\n\nprint(a, b)\n\n97 93\n\n\n\n\n\n\n\nif 조건식:  　　문장1  else:  　　문장2\n\n\n조건식이 참이면 문장1을 실행하고, 거짓이면 문장2를 실행함\n조건식 오른쪽에 :이 위치하고, else 오른쪽에는 조건식 없이 :이 위치함\n문장1과 문장2는 반드시 들여쓰기해야 함\n\n\n\n\n# 무작위로 1~100 사이의 정수를 생성한 후, 짝수인지 홀수인지 판단\nimport random\na = random.randint(1, 100)\n\nif a % 2 == 0:\n    print(f'{a}는 짝수입니다')\nelse:\n    print(f'{a}는 홀수입니다')\n\n19는 홀수입니다\n\n\n\n\n\n\n\nif 조건식1:  　　문장1  elif 조건식2:  　　문장2  else:  　　문장3\n\n\n조건식1이 거짓인 경우에 또 다른 선택구조를 연결하는 구조\n조건식1이 참이면 문장1을 실행하고, 조건식1이 거짓이면서 조건식2가 참이면 문장2를 실행하고, 두 조건식 모두 거짓이면 문장3을 실행함\n조건식1, 조건식2 오른쪽에 :이 위치하고, 문장1, 문장2, 문장3은 반드시 들여쓰기해야 함\n\n\n\n\n# 놀이공원 기본 입장료는 5,000원임\n# 8세 미만은 기본 입장료 30% 할인, 65세 이상은 기본 입장료 20% 할인 적용함\n# 연령이 주어졌을 때, 놀이공원 입장료 산출\nfee = 5000\nage = 7\n\nif age &lt; 8:\n    print('입장료:', fee*0.7)\nelif age &lt; 65:\n    print('입장료:', fee)\nelse:\n    print('입장료:', fee*0.8)\n\n입장료: 3500.0"
  },
  {
    "objectID": "2_2_conditional.html#조건문",
    "href": "2_2_conditional.html#조건문",
    "title": "2. Python 기초",
    "section": "",
    "text": "프로그램 구조는 크게 순차 구조, 선택 구조, 반복 구조로 구분됨\n\n순차 구조 : 위에서부터 아래로 순차적으로 실행되는 구조\n선택 구조 : 조건에 따라 문장을 선택적으로 실행하는 구조로, 조건이 참(True)인지 거짓(False)인지에 따라 실행되는 문장이 달라짐\n반복 구조 : 임의의 문장을 반복해서 실행하는 구조\n\n\n\n\n\n\n\n\n\nif 조건식:  　　문장\n\n\n조건식이 참이면 문장을 실행하고 거짓이면 문장을 실행하지 않음\n조건식 오른쪽에 :이 위치하고, 참인 경우 실행될 문장은 반드시 들여쓰기(indentation)해야 함\n\n\n\n\n# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력\nimport random\na = random.randint(1, 100)\nb = random.randint(1, 100)\n\nif a&lt;b:\n    a, b = b, a\n\nprint(a, b)\n\n97 93\n\n\n\n\n\n\n\nif 조건식:  　　문장1  else:  　　문장2\n\n\n조건식이 참이면 문장1을 실행하고, 거짓이면 문장2를 실행함\n조건식 오른쪽에 :이 위치하고, else 오른쪽에는 조건식 없이 :이 위치함\n문장1과 문장2는 반드시 들여쓰기해야 함\n\n\n\n\n# 무작위로 1~100 사이의 정수를 생성한 후, 짝수인지 홀수인지 판단\nimport random\na = random.randint(1, 100)\n\nif a % 2 == 0:\n    print(f'{a}는 짝수입니다')\nelse:\n    print(f'{a}는 홀수입니다')\n\n19는 홀수입니다\n\n\n\n\n\n\n\nif 조건식1:  　　문장1  elif 조건식2:  　　문장2  else:  　　문장3\n\n\n조건식1이 거짓인 경우에 또 다른 선택구조를 연결하는 구조\n조건식1이 참이면 문장1을 실행하고, 조건식1이 거짓이면서 조건식2가 참이면 문장2를 실행하고, 두 조건식 모두 거짓이면 문장3을 실행함\n조건식1, 조건식2 오른쪽에 :이 위치하고, 문장1, 문장2, 문장3은 반드시 들여쓰기해야 함\n\n\n\n\n# 놀이공원 기본 입장료는 5,000원임\n# 8세 미만은 기본 입장료 30% 할인, 65세 이상은 기본 입장료 20% 할인 적용함\n# 연령이 주어졌을 때, 놀이공원 입장료 산출\nfee = 5000\nage = 7\n\nif age &lt; 8:\n    print('입장료:', fee*0.7)\nelif age &lt; 65:\n    print('입장료:', fee)\nelse:\n    print('입장료:', fee*0.8)\n\n입장료: 3500.0"
  },
  {
    "objectID": "1_python.html",
    "href": "1_python.html",
    "title": "1. Python 소개 및 설치",
    "section": "",
    "text": "컴퓨터 프로그램과 프로그래밍 언어\n\n컴퓨터 프로그램 (computer program) : 컴퓨터로 문제를 해결하기 위해 작성하는 명령어의 모음\n프로그래밍 언어(programming language)\n\n컴퓨터에 어떤 동작을 수행하도록 지시하는 언어\n프로그래밍 언어를 사용하여 프로그램을 논리적으로 작성하는 작업을 코딩(coding)이라고 함\n\n\n\n\n\nPython\n\n1991년 귀도 반 로섬(Guido van Rossum)이 개발한 프로그래밍 언어\n빅데이터 분석과 인공지능 분야에서 가장 널리 사용되고 있음\n문법이 쉽고 간결하여 프로그래밍을 처음 접하는 사람이 배우기 적합함\n\n\n\n\nPython 특징\n\n플랫폼 독립적인 언어 : 컴퓨터 운영체제나 하드웨어의 종류에 관계없이 사용할 수 있음\n인터프리터 언어 : 소스코드 자체가 바로 실행되어 간편하게 사용할 수 있음(속도는 느림)\n동적 타이핑 언어\n\n프로그램의 실행 시점에서 각 프로그램 변수의 타입(type)을 결정하는 언어\n인터프리터 언어이므로 프로그램의 실행 시점에 변수들의 메모리 공간을 자유롭게 할당받을 수 있음\n\n객체 지향 언어\n\n프로그램이 해결해야 할 문제의 구성요소를 요소별로 정의한 다음, 각 요소의 기능(method)과 정보(attribute)를 프로그래밍한 다음 요소들을 결합하는 방식으로 프로그램을 작성함\n이때 각 요소를 객체(object)라고 하며, 한 번 만들어진 객체는 재사용(reusability)할 수 있음"
  },
  {
    "objectID": "1_python.html#python-소개",
    "href": "1_python.html#python-소개",
    "title": "1. Python 소개 및 설치",
    "section": "",
    "text": "컴퓨터 프로그램과 프로그래밍 언어\n\n컴퓨터 프로그램 (computer program) : 컴퓨터로 문제를 해결하기 위해 작성하는 명령어의 모음\n프로그래밍 언어(programming language)\n\n컴퓨터에 어떤 동작을 수행하도록 지시하는 언어\n프로그래밍 언어를 사용하여 프로그램을 논리적으로 작성하는 작업을 코딩(coding)이라고 함\n\n\n\n\n\nPython\n\n1991년 귀도 반 로섬(Guido van Rossum)이 개발한 프로그래밍 언어\n빅데이터 분석과 인공지능 분야에서 가장 널리 사용되고 있음\n문법이 쉽고 간결하여 프로그래밍을 처음 접하는 사람이 배우기 적합함\n\n\n\n\nPython 특징\n\n플랫폼 독립적인 언어 : 컴퓨터 운영체제나 하드웨어의 종류에 관계없이 사용할 수 있음\n인터프리터 언어 : 소스코드 자체가 바로 실행되어 간편하게 사용할 수 있음(속도는 느림)\n동적 타이핑 언어\n\n프로그램의 실행 시점에서 각 프로그램 변수의 타입(type)을 결정하는 언어\n인터프리터 언어이므로 프로그램의 실행 시점에 변수들의 메모리 공간을 자유롭게 할당받을 수 있음\n\n객체 지향 언어\n\n프로그램이 해결해야 할 문제의 구성요소를 요소별로 정의한 다음, 각 요소의 기능(method)과 정보(attribute)를 프로그래밍한 다음 요소들을 결합하는 방식으로 프로그램을 작성함\n이때 각 요소를 객체(object)라고 하며, 한 번 만들어진 객체는 재사용(reusability)할 수 있음"
  },
  {
    "objectID": "1_python.html#python-설치",
    "href": "1_python.html#python-설치",
    "title": "1. Python 소개 및 설치",
    "section": "1.2. Python 설치",
    "text": "1.2. Python 설치\n\n1.2.1. Jupyter Notebook과 Jupyter Lab\n\nJupyter Notebook\n\n가장 많이 사용되는 Python IDE 중 하나로, 웹 브라우저에서 실행되는 대화형 개발 도구\n코드 작성과 실행을 한 화면에서 쉽게 수행할 수 있으며, 텍스트(markdown), 수식(LaTeX), 그래프(Matplotlib) 등을 함께 포함할 수 있음\n실행 결과가 셀 단위로 저장되어, 데이터 분석 과정을 논리적인 흐름으로 문서화하여 공유하기 용이함\n특히 데이터 과학, 머신러닝, 교육, 연구 분야에서 많이 활용됨\n\n\n\n\nJupyter Lab\n\nJupyter Notebook을 확장한 차세대 인터페이스로, 더욱 유연하고 강력한 기능을 제공하는 개발 환경\n탭(tab) 기반 인터페이스를 지원하여 여러 개의 노트북, 터미널, 텍스트 파일, 콘솔 등을 동시에 열고 작업할 수 있음\n코드 편집, 데이터 분석, 시각화 등 데이터 과학 및 머신러닝 작업에 최적화된 다양한 편의 기능이 포함됨\n파일 브라우저, 터미널, markdown 편집기, 확장 플러그인 지원 등으로 보다 통합적인 워크플로우 제공\nJupyter Notebook과 호환되며, 확장성을 고려하여 설계되어 다양한 플로그인 추가가 가능함\n\n\n\n\n가상 환경(virtual environment)\n\n독립적인 작업 공간을 제공하여, 하나의 컴퓨터에서 여러 프로젝트를 각각의 독립된 환경으로 격리하여 실행할 수 있음\n하나의 시스템에서 여러 버전의 Python, 라이브러리 등을 설치하고, 프로젝트마다 서로 다른 버전의 의존성을 관리할 수 있음\n충돌 방지 및 의존성 관리에 유용하며, 특정 프로젝트에 필요한 패키지나 라이브러리만 설치하여 다른 프로젝트에 영향을 주지 않음\n프로젝트 간의 의존성 충돌을 피하고, 재현 가능한 환경을 제공하여 코드의 안정성을 높이고 협업을 용이하게 함\n\n\n\n\n가상 환경을 만든 후, Jupyter Lab 설치 및 실행\n\nAnaconda3 설치\nAnaconda Prompt 실행\n가상 환경 생성 : conda create -n myenv python=3.9\n가상 환경 리스트 조회 : conda info --envs\n가상 환경 접속(활성화) : conda activate myenv\n가상 환경에서 Jupyter Lab 설치 : conda install -c conda-forge jupyterlab\nJupyter Lab 접속 : jupyter lab\n\n\n\n\n\n1.2.2. Google Colab\n\nGoogle Colab\n\n구글에서 제공하는 클라우드 기반의 Jupyter Notebook 개발 환경으로, 웹 브라우저에서 Python 코드 작성 및 실행이 가능함\n별도의 설치 없이 바로 사용할 수 있으며, 구글 드라이브와 연동하여 작성한 파일을 클라우드에 저장하고 쉽게 관리 가능\n다양한 라이브러리(Numpy, Pandas, Matplotlib 등)가 기본적으로 설치되어 있음\nGPU, TPU 지원을 통해 대규모 데이터 처리와 딥러닝 모델 학습에 유리함\n협업 기능을 제공하여, 여러 사람이 동시에 실시간으로 작업하고 프로그램을 공유할 수 있음"
  },
  {
    "objectID": "2_1_basic.html",
    "href": "2_1_basic.html",
    "title": "2. Python 기초",
    "section": "",
    "text": "변수(variable)\n\n프로그램이 실행되는 동안 값을 저장하는 공간\n하나의 프로그램에서 여러 개의 변수를 만들어 사용할 수 있으며, 각 변수를 구분하기 위해 변수마다 이름을 붙여 관리함\n변수에는 언제든지 새로운 값을 저장할 수 있음\n(정의) 변수 이름 = 값\n\n\n\n\n대입 연산자 =\n\n변수에 값을 저장할 때 사용하는 연산자로, 할당 연산자라고도 함\n= 기호 오른쪽의 값을 = 기호 왼쪽의 변수에 저장한다는 의미\n\n\n\n# 변수에 값을 저장하고 출력\nage = 20\nprint(age)\n\n20\n\n\n\n# 변수에 저장된 값 변경\nage = 21\nprint(age)\n\n21\n\n\n\n# 여러 변수에 값 대입\na = b = c = 7\nprint(a)\nprint(b)\nprint(c)\n\n7\n7\n7\n\n\n\n# 코드 한 줄에서 여러 개의 변수에 각각 다른 값을 한번에 대입할 수 있음\na, b, c = 7, 11, 19\nprint(a)\nprint(b)\nprint(c)\n\n7\n11\n19\n\n\n\n# 두 변수의 값 교환\na = 7\nb = 11\ntemp = a\na = b\nb = temp\nprint(a, b)\n\n11 7\n\n\n\n# Python에서는 튜플 패킹과 언패킹(tuple packing & unpacking)을 활용하여 임시변수 없이 두 변수의 값을 쉽게 교환할 수 있음\na = 7\nb = 11\na, b = b, a\nprint(a, b)\n\n11 7\n\n\n\n변수 이름 규칙\n\n변수가 어떤 용도로 쓰이는지 잘 설명하는 이름으로 만드는 것이 좋음\n첫 번째글자는 문자 또는 밑줄(_)이어야 하고, 나머지 글자는 문자, 숫자, 밑줄(_)이어야 함\n영문 대문자와 소문자를 구분함\n키워드(예약어; keyword)는 변수 이름으로 사용할 수 없음\n\n키워드 : 프로그래밍 언어에서 사용하기 위해 쓰임새를 미리 정해 놓은 단어\n\n\n\n\nimport keyword\nprint(keyword.kwlist)\n\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n\n\n\n\n\n\n기본 자료형\n\n단순한 값을 저장하는 자료형\n(예시) 정수(1,2,3,…), 부동소수점수(1.23, 3.14, …), 복소수(2+3j), 문자열(‘Hi!’), bool(True, False)\n\n구조적 자료형\n\n여러 개의 값을 담을 수 있는 자료형\n(예시) 리스트(list), 튜플(tuple), 셋(set), 딕셔너리(dict)\n\ntype() 함수를 이용하여 자료형을 확인할 수 있음\n\n\n# 정수형\na = 20                      # 10진수\nb = 0o34                    # 8진수\nc = 0xA1                    # 16진수\nd = 0b1110                  # 2진수\nprint(a, b, c, d)\nprint(type(a))\n\n20 28 161 14\n&lt;class 'int'&gt;\n\n\n\n# 부동소수점수형\na = 3.14\nb = 1.23e5                  # 지수 표현 방식\nprint(a, b)\nprint(type(a))\n\n3.14 123000.0\n&lt;class 'float'&gt;\n\n\n\n# 문자열형\na = 'Hello'\nb = \"Python\"\nprint(a, b)\nprint(type(a))\n\nHello Python\n&lt;class 'str'&gt;\n\n\n\n# 문자열 연결\n# 문자열 연결 연산자 +로 문자열과 문자열을 연결할 수 있음\nprint('Hello ' + 'Python')\n\nHello Python\n\n\n\n# bool형\na = 10&gt;20\nprint(a)\nprint(type(a))\n\nFalse\n&lt;class 'bool'&gt;\n\n\n\n\n\n\n\n입력\n\n사용자로부터 데이터를 입력받기 위해 input() 함수를 이용함\ninput() 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 데이터를 문자열 형식으로 반환함\n변수 = input(안내문)\n\n출력\n\n데이터를 출력하기 위해 print() 함수를 이용함\n여러 개의 값을 출력하려면 콤마(,)로 구분한 값을 나열하면 됨\n\n\n\n# 문자열 입력\n#name = input('이름: ')\n#age = input('나이: ')\n#print(name, '나이:', age)\n\n\n# 정수 형식의 문자열 입력\n# input 함수를 통해서 입력받은 데이터는 문자열형임\n# 따라서 int() 함수를 이용하여 정수 형식의 문자열을 정수로 변환해야 함\n#a = int(input(\"정수: \"))\n#b = int(input(\"정수: \"))\n#print(a-b)\n\n\n# 부동소수점 형식의 문자열 입력\n# float() 함수를 이용하여 부동소수점수 형식의 문자열을 부동소수점수로 변환함\n#minute = float(input('분 단위 시간: '))\n#second = minute * 60\n#print(second, '초')\n\n\n# 문자열 출력\nprint('반갑습니다.')\nscore = 99\nprint('성적은', score, '입니다.')\n\n반갑습니다.\n성적은 99 입니다.\n\n\n\n# print() 함수가 여러 개일 때는 다음 줄로 넘어가서 값을 출력함\na = 25\nb = 42\nprint(a)\nprint(b)\n\n25\n42\n\n\n\n# print() 함수가 여러 개일 때 다음 줄로 넘어가는 대신 공백이 출력되기를 원하면 end 매개변수를 공백으로 설정함\na = 25\nb = 42\nprint(a, end=' ')\nprint(b)\n\n25 42\n\n\n\nf-문자열(f-string)\n\n문자열 앞에 소문자 f나 대문자 F를 붙이고, 문자열 안의 변수를 {}로 감싸서 표현하는 것\nf-문자열을 이용하면 변수 값이 출력되는 형식을 지정할 수 있음\n\n\n\n# f-문자열 사용\nname = '홍길동'\nage = 20\nprint(f'이름은 {name}이고, 나이는 {age}입니다.')\n\n이름은 홍길동이고, 나이는 20입니다.\n\n\n\n# f-문자열 출력 형식 지정\n# 변수명 옆에 :을 작성한 다음 형식을 지정함\nname = '홍길동'\nage = 20\nprint(f'{name:5}, {age:3}')\n\na = 4\nb = 3.14159265\nprint(f'20{c:02d}')                        # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움\nprint(f'{a:.3f}')                          # c 값을 소수점 이하 세자리로 반올림하여 출력\n\n홍길동  ,  20\n20161\n4.000\n\n\n\n# 원의 넓이 구하기\n#pi = 3.14159265\n#radius = int(input('원의 반지름: '))\n#area = pi * radius * radius\n#print(f'원의 넓이: {area:.3f}')\n\n\n\n\n\n\n연산(operation) : 덧셈, 뺄셈 등과 같이 일정한 규칙에 따라 계산하는 것\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n+\n더하기\nprint(6+4)\n10\n\n\n-\n빼기\nprint(6-4)\n2\n\n\n*\n곱하기\nprint(6*4)\n24\n\n\n/\n나누기\nprint(6/4)\n1.5\n\n\n//\n나눈 정수 몫\nprint(6//4)\n1\n\n\n%\n나눈 나머지\nprint(6%4)\n2\n\n\n**\n거듭제곱\nprint(6**4)\n1296\n\n\n\n\n\n\n\n\n크기를 비교할 때 사용하는 연산자\n연산 결과는 참(True) 또는 거짓(False)으로 나타남\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n==\n같다\nprint(10==20)\nFalse\n\n\n!=\n같지 않다\nprint(10!=20)\nTrue\n\n\n&gt;\n크다\nprint(10&gt;20)\nFalse\n\n\n&lt;\n작다\nprint(10&lt;20)\nTrue\n\n\n&gt;=\n크거나 같다\nprint(10&gt;=20)\nFalse\n\n\n&lt;=\n작거나 같다\nprint(10&lt;=20)\nTrue\n\n\n\n\n\n\n\n\n참과 거짓의 논리 동작을 다루는 연산\n여러 조건을 조합할 때 주로 사용함\n\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\nand\n왼쪽 식과 오른쪽 식 모두 참인 경우에만 True\na=25 print(a&gt;8 and a&lt;60)\nTrue\n\n\nor\n왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True\na=70 print(a&lt;8 or a&gt;=60)\nTrue\n\n\nnot\n오른쪽 식이 참이면 False, 거짓이면 True\na=20 print(not a==20)\nFalse\n\n\n\n\n\n\n\n\n연산한 값을 다시 대입하는 연산자\n\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n+=\n왼쪽 값에 오른쪽 값을 더한 결과를 다시 왼쪽에 대입\na, b = 2, 3 a += b  print(a)\n5\n\n\n-=\n왼쪽 값에 오른쪽 값을 뺀 결과를 다시 왼쪽에 대입\na, b = 2, 3 a -= b  print(a)\n-1\n\n\n*=\n왼쪽 값에 오른쪽 값을 곱한 결과를 다시 왼쪽에 대입\na, b = 2, 3 a *= b  print(a)\n6\n\n\n/=\n왼쪽 값에 오른쪽 값을 나눈 결과를 다시 왼쪽에 대입\na, b = 3, 2 a /= b  print(a)\n1.5\n\n\n//=\n왼쪽 값에 오른쪽 값을 나눈 몫을 다시 왼쪽에 대입\na, b = 7, 3 a //= b  print(a)\n2\n\n\n%=\n왼쪽 값에 오른쪽 값을 나눈 나머지를 다시 왼쪽에 대입\na, b = 7, 3 a %= b  print(a)\n1\n\n\n\n\n\n\n\n\n프로그래밍 언어는 연산자에 우선순위를 부여하여 우선순위가 높은 연산자를 먼저 계산함\n우선순위에 관계없이 연산의 순서를 정하려면 괄호()를 사용함\n\n\n\n\n우선순위\n연산자\n설명\n\n\n\n\n1\n**\n거듭제곱 연산자\n\n\n2\n+, -\n양수, 음수를 나타내는 단항 연산자\n\n\n3\n*, /, //, %\n곱셈, 나눗셈, 나눈 몫, 나머지\n\n\n4\n+, -\n덧셈, 뺄셈\n\n\n5\n&lt;, &lt;=, &gt;, &gt;=\n비교 연산자\n\n\n6\n==, !=\n동등 연산자\n\n\n7\n=, +=, -=, /=, //=, %=, **=\n대입 연산자\n\n\n8\nnot\n논리 연산자\n\n\n9\nand\n논리 연산자\n\n\n10\nor\n논리 연산자\n\n\n\n\n# 정수 3개의 평균 계산(틀림)\navg = 70 + 80 + 90 / 3\nprint(avg)\n\n180.0\n\n\n\n# 정수 3개의 평균 계산\navg = (70 + 80 + 90) / 3\nprint(avg)\n\n80.0\n\n\n\n# 길이 단위 변환\n#_cm = int(input('센티미터 단위 길이: '))\n#m = _cm // 100\n#cm = _cm % 100\n#print(f'{m}미터 {cm}센티미터')"
  },
  {
    "objectID": "2_1_basic.html#기초-문법",
    "href": "2_1_basic.html#기초-문법",
    "title": "2. Python 기초",
    "section": "",
    "text": "변수(variable)\n\n프로그램이 실행되는 동안 값을 저장하는 공간\n하나의 프로그램에서 여러 개의 변수를 만들어 사용할 수 있으며, 각 변수를 구분하기 위해 변수마다 이름을 붙여 관리함\n변수에는 언제든지 새로운 값을 저장할 수 있음\n(정의) 변수 이름 = 값\n\n\n\n\n대입 연산자 =\n\n변수에 값을 저장할 때 사용하는 연산자로, 할당 연산자라고도 함\n= 기호 오른쪽의 값을 = 기호 왼쪽의 변수에 저장한다는 의미\n\n\n\n# 변수에 값을 저장하고 출력\nage = 20\nprint(age)\n\n20\n\n\n\n# 변수에 저장된 값 변경\nage = 21\nprint(age)\n\n21\n\n\n\n# 여러 변수에 값 대입\na = b = c = 7\nprint(a)\nprint(b)\nprint(c)\n\n7\n7\n7\n\n\n\n# 코드 한 줄에서 여러 개의 변수에 각각 다른 값을 한번에 대입할 수 있음\na, b, c = 7, 11, 19\nprint(a)\nprint(b)\nprint(c)\n\n7\n11\n19\n\n\n\n# 두 변수의 값 교환\na = 7\nb = 11\ntemp = a\na = b\nb = temp\nprint(a, b)\n\n11 7\n\n\n\n# Python에서는 튜플 패킹과 언패킹(tuple packing & unpacking)을 활용하여 임시변수 없이 두 변수의 값을 쉽게 교환할 수 있음\na = 7\nb = 11\na, b = b, a\nprint(a, b)\n\n11 7\n\n\n\n변수 이름 규칙\n\n변수가 어떤 용도로 쓰이는지 잘 설명하는 이름으로 만드는 것이 좋음\n첫 번째글자는 문자 또는 밑줄(_)이어야 하고, 나머지 글자는 문자, 숫자, 밑줄(_)이어야 함\n영문 대문자와 소문자를 구분함\n키워드(예약어; keyword)는 변수 이름으로 사용할 수 없음\n\n키워드 : 프로그래밍 언어에서 사용하기 위해 쓰임새를 미리 정해 놓은 단어\n\n\n\n\nimport keyword\nprint(keyword.kwlist)\n\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n\n\n\n\n\n\n기본 자료형\n\n단순한 값을 저장하는 자료형\n(예시) 정수(1,2,3,…), 부동소수점수(1.23, 3.14, …), 복소수(2+3j), 문자열(‘Hi!’), bool(True, False)\n\n구조적 자료형\n\n여러 개의 값을 담을 수 있는 자료형\n(예시) 리스트(list), 튜플(tuple), 셋(set), 딕셔너리(dict)\n\ntype() 함수를 이용하여 자료형을 확인할 수 있음\n\n\n# 정수형\na = 20                      # 10진수\nb = 0o34                    # 8진수\nc = 0xA1                    # 16진수\nd = 0b1110                  # 2진수\nprint(a, b, c, d)\nprint(type(a))\n\n20 28 161 14\n&lt;class 'int'&gt;\n\n\n\n# 부동소수점수형\na = 3.14\nb = 1.23e5                  # 지수 표현 방식\nprint(a, b)\nprint(type(a))\n\n3.14 123000.0\n&lt;class 'float'&gt;\n\n\n\n# 문자열형\na = 'Hello'\nb = \"Python\"\nprint(a, b)\nprint(type(a))\n\nHello Python\n&lt;class 'str'&gt;\n\n\n\n# 문자열 연결\n# 문자열 연결 연산자 +로 문자열과 문자열을 연결할 수 있음\nprint('Hello ' + 'Python')\n\nHello Python\n\n\n\n# bool형\na = 10&gt;20\nprint(a)\nprint(type(a))\n\nFalse\n&lt;class 'bool'&gt;\n\n\n\n\n\n\n\n입력\n\n사용자로부터 데이터를 입력받기 위해 input() 함수를 이용함\ninput() 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 데이터를 문자열 형식으로 반환함\n변수 = input(안내문)\n\n출력\n\n데이터를 출력하기 위해 print() 함수를 이용함\n여러 개의 값을 출력하려면 콤마(,)로 구분한 값을 나열하면 됨\n\n\n\n# 문자열 입력\n#name = input('이름: ')\n#age = input('나이: ')\n#print(name, '나이:', age)\n\n\n# 정수 형식의 문자열 입력\n# input 함수를 통해서 입력받은 데이터는 문자열형임\n# 따라서 int() 함수를 이용하여 정수 형식의 문자열을 정수로 변환해야 함\n#a = int(input(\"정수: \"))\n#b = int(input(\"정수: \"))\n#print(a-b)\n\n\n# 부동소수점 형식의 문자열 입력\n# float() 함수를 이용하여 부동소수점수 형식의 문자열을 부동소수점수로 변환함\n#minute = float(input('분 단위 시간: '))\n#second = minute * 60\n#print(second, '초')\n\n\n# 문자열 출력\nprint('반갑습니다.')\nscore = 99\nprint('성적은', score, '입니다.')\n\n반갑습니다.\n성적은 99 입니다.\n\n\n\n# print() 함수가 여러 개일 때는 다음 줄로 넘어가서 값을 출력함\na = 25\nb = 42\nprint(a)\nprint(b)\n\n25\n42\n\n\n\n# print() 함수가 여러 개일 때 다음 줄로 넘어가는 대신 공백이 출력되기를 원하면 end 매개변수를 공백으로 설정함\na = 25\nb = 42\nprint(a, end=' ')\nprint(b)\n\n25 42\n\n\n\nf-문자열(f-string)\n\n문자열 앞에 소문자 f나 대문자 F를 붙이고, 문자열 안의 변수를 {}로 감싸서 표현하는 것\nf-문자열을 이용하면 변수 값이 출력되는 형식을 지정할 수 있음\n\n\n\n# f-문자열 사용\nname = '홍길동'\nage = 20\nprint(f'이름은 {name}이고, 나이는 {age}입니다.')\n\n이름은 홍길동이고, 나이는 20입니다.\n\n\n\n# f-문자열 출력 형식 지정\n# 변수명 옆에 :을 작성한 다음 형식을 지정함\nname = '홍길동'\nage = 20\nprint(f'{name:5}, {age:3}')\n\na = 4\nb = 3.14159265\nprint(f'20{c:02d}')                        # a 값을 두자리로 출력하되 앞의 빈곳은 0으로 채움\nprint(f'{a:.3f}')                          # c 값을 소수점 이하 세자리로 반올림하여 출력\n\n홍길동  ,  20\n20161\n4.000\n\n\n\n# 원의 넓이 구하기\n#pi = 3.14159265\n#radius = int(input('원의 반지름: '))\n#area = pi * radius * radius\n#print(f'원의 넓이: {area:.3f}')\n\n\n\n\n\n\n연산(operation) : 덧셈, 뺄셈 등과 같이 일정한 규칙에 따라 계산하는 것\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n+\n더하기\nprint(6+4)\n10\n\n\n-\n빼기\nprint(6-4)\n2\n\n\n*\n곱하기\nprint(6*4)\n24\n\n\n/\n나누기\nprint(6/4)\n1.5\n\n\n//\n나눈 정수 몫\nprint(6//4)\n1\n\n\n%\n나눈 나머지\nprint(6%4)\n2\n\n\n**\n거듭제곱\nprint(6**4)\n1296\n\n\n\n\n\n\n\n\n크기를 비교할 때 사용하는 연산자\n연산 결과는 참(True) 또는 거짓(False)으로 나타남\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n==\n같다\nprint(10==20)\nFalse\n\n\n!=\n같지 않다\nprint(10!=20)\nTrue\n\n\n&gt;\n크다\nprint(10&gt;20)\nFalse\n\n\n&lt;\n작다\nprint(10&lt;20)\nTrue\n\n\n&gt;=\n크거나 같다\nprint(10&gt;=20)\nFalse\n\n\n&lt;=\n작거나 같다\nprint(10&lt;=20)\nTrue\n\n\n\n\n\n\n\n\n참과 거짓의 논리 동작을 다루는 연산\n여러 조건을 조합할 때 주로 사용함\n\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\nand\n왼쪽 식과 오른쪽 식 모두 참인 경우에만 True\na=25 print(a&gt;8 and a&lt;60)\nTrue\n\n\nor\n왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True\na=70 print(a&lt;8 or a&gt;=60)\nTrue\n\n\nnot\n오른쪽 식이 참이면 False, 거짓이면 True\na=20 print(not a==20)\nFalse\n\n\n\n\n\n\n\n\n연산한 값을 다시 대입하는 연산자\n\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예시\n결과\n\n\n\n\n+=\n왼쪽 값에 오른쪽 값을 더한 결과를 다시 왼쪽에 대입\na, b = 2, 3 a += b  print(a)\n5\n\n\n-=\n왼쪽 값에 오른쪽 값을 뺀 결과를 다시 왼쪽에 대입\na, b = 2, 3 a -= b  print(a)\n-1\n\n\n*=\n왼쪽 값에 오른쪽 값을 곱한 결과를 다시 왼쪽에 대입\na, b = 2, 3 a *= b  print(a)\n6\n\n\n/=\n왼쪽 값에 오른쪽 값을 나눈 결과를 다시 왼쪽에 대입\na, b = 3, 2 a /= b  print(a)\n1.5\n\n\n//=\n왼쪽 값에 오른쪽 값을 나눈 몫을 다시 왼쪽에 대입\na, b = 7, 3 a //= b  print(a)\n2\n\n\n%=\n왼쪽 값에 오른쪽 값을 나눈 나머지를 다시 왼쪽에 대입\na, b = 7, 3 a %= b  print(a)\n1\n\n\n\n\n\n\n\n\n프로그래밍 언어는 연산자에 우선순위를 부여하여 우선순위가 높은 연산자를 먼저 계산함\n우선순위에 관계없이 연산의 순서를 정하려면 괄호()를 사용함\n\n\n\n\n우선순위\n연산자\n설명\n\n\n\n\n1\n**\n거듭제곱 연산자\n\n\n2\n+, -\n양수, 음수를 나타내는 단항 연산자\n\n\n3\n*, /, //, %\n곱셈, 나눗셈, 나눈 몫, 나머지\n\n\n4\n+, -\n덧셈, 뺄셈\n\n\n5\n&lt;, &lt;=, &gt;, &gt;=\n비교 연산자\n\n\n6\n==, !=\n동등 연산자\n\n\n7\n=, +=, -=, /=, //=, %=, **=\n대입 연산자\n\n\n8\nnot\n논리 연산자\n\n\n9\nand\n논리 연산자\n\n\n10\nor\n논리 연산자\n\n\n\n\n# 정수 3개의 평균 계산(틀림)\navg = 70 + 80 + 90 / 3\nprint(avg)\n\n180.0\n\n\n\n# 정수 3개의 평균 계산\navg = (70 + 80 + 90) / 3\nprint(avg)\n\n80.0\n\n\n\n# 길이 단위 변환\n#_cm = int(input('센티미터 단위 길이: '))\n#m = _cm // 100\n#cm = _cm % 100\n#print(f'{m}미터 {cm}센티미터')"
  },
  {
    "objectID": "2_3_loop.html",
    "href": "2_3_loop.html",
    "title": "2. Python 기초",
    "section": "",
    "text": "for 반복변수 in 반복범위:  　　문장\n\n\n반복범위를 지정하여(정해진 횟수만큼) 반복해서 문장을 실행함\n반복범위 오른쪽에는 :이 위치하고, 반복해서 실행할 문장은 반드시 들여쓰기해야 함\n반복범위에는 범위, 문자열, 리스트, 딕셔너리 등이 사용될 수 있음\n\n그 중 범위가 가장 많이 사용되며, range() 함수로 만들 수 있음\n\n\n\n\n\n\n\n\n\n\n\n형식\n설명\n예시\n결과\n\n\n\n\nrange(종료값)\n0으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성\nrange(5)\n0,1,2,3,4\n\n\nrange(시작값, 종료값)\n시작값으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성\nrang(2,7)\n2,3,4,5,6\n\n\nrange(시작값, 종료값, 증가값)\n시작값으로 시작해서 증가값만큼 증가시키면서 종료값 전까지의 정수를 생성\nrange(2,11,3)\n2,5,8\n\n\n\n\n# 문자열을 3번 반복해서 출력\nfor i in range(3):\n    print(\"Hello!\")\n\nHello!\nHello!\nHello!\n\n\n\n# 반복범위의 값을 출력1\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n# 반복범위의 값을 출력2\nfor i in \"World\":\n    print(i)\n\nW\no\nr\nl\nd\n\n\n\n# 1~100 정수의 합 계산\nsum = 0\n\nfor i in range(1,101):\n    sum += i\n\nprint(sum)\n\n5050\n\n\n\n# 30의 약수 출력\nnum = 30\n\nfor i in range(1, num+1):\n    if num%i == 0:\n        print(i, end=' ')\n\n1 2 3 5 6 10 15 30 \n\n\n\n\n\n\n\nwhile 조건식:  　　문장\n\n\n조건이 참인 동안 문장을 반복해서 실행하고, 조건이 거짓이면 반복문을 종료함\n\n\n# 1~100 정수의 합 계산\nsum = 0\nnum = 1\n\nwhile num&lt;=100:\n    sum += num\n    num += 1\n\nprint(sum)\n\n5050\n\n\n\n# 구구단 9단 출력\nnum = 1\n\nwhile num&lt;=9:\n    print(f'9x{num}={9*num}')\n    num += 1\n\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81"
  },
  {
    "objectID": "2_3_loop.html#반복문",
    "href": "2_3_loop.html#반복문",
    "title": "2. Python 기초",
    "section": "",
    "text": "for 반복변수 in 반복범위:  　　문장\n\n\n반복범위를 지정하여(정해진 횟수만큼) 반복해서 문장을 실행함\n반복범위 오른쪽에는 :이 위치하고, 반복해서 실행할 문장은 반드시 들여쓰기해야 함\n반복범위에는 범위, 문자열, 리스트, 딕셔너리 등이 사용될 수 있음\n\n그 중 범위가 가장 많이 사용되며, range() 함수로 만들 수 있음\n\n\n\n\n\n\n\n\n\n\n\n형식\n설명\n예시\n결과\n\n\n\n\nrange(종료값)\n0으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성\nrange(5)\n0,1,2,3,4\n\n\nrange(시작값, 종료값)\n시작값으로 시작해서 1씩 증가하며 종료값 전까지의 정수를 생성\nrang(2,7)\n2,3,4,5,6\n\n\nrange(시작값, 종료값, 증가값)\n시작값으로 시작해서 증가값만큼 증가시키면서 종료값 전까지의 정수를 생성\nrange(2,11,3)\n2,5,8\n\n\n\n\n# 문자열을 3번 반복해서 출력\nfor i in range(3):\n    print(\"Hello!\")\n\nHello!\nHello!\nHello!\n\n\n\n# 반복범위의 값을 출력1\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n# 반복범위의 값을 출력2\nfor i in \"World\":\n    print(i)\n\nW\no\nr\nl\nd\n\n\n\n# 1~100 정수의 합 계산\nsum = 0\n\nfor i in range(1,101):\n    sum += i\n\nprint(sum)\n\n5050\n\n\n\n# 30의 약수 출력\nnum = 30\n\nfor i in range(1, num+1):\n    if num%i == 0:\n        print(i, end=' ')\n\n1 2 3 5 6 10 15 30 \n\n\n\n\n\n\n\nwhile 조건식:  　　문장\n\n\n조건이 참인 동안 문장을 반복해서 실행하고, 조건이 거짓이면 반복문을 종료함\n\n\n# 1~100 정수의 합 계산\nsum = 0\nnum = 1\n\nwhile num&lt;=100:\n    sum += num\n    num += 1\n\nprint(sum)\n\n5050\n\n\n\n# 구구단 9단 출력\nnum = 1\n\nwhile num&lt;=9:\n    print(f'9x{num}={9*num}')\n    num += 1\n\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81"
  }
]