---
title: 2. Python 기초
jupyter: python3
---

## 2.5. 문자열
### 2.5.1. 문자열 생성
+ 문자열(string)
  + 문자(character)들이 나열된 시퀀스 자료형(sequence data type)으로, 데이터를 순차적으로 메모리에 저장하는 불변형(immutable) 객체
  + 큰 따옴표 `"` 또는 작은 따옴표`'`로 감싸서 문자열을 생성함

<br>

+ 이스케이프 문자(escape character)
  + `\` 기호와 함께 조합해서 사용하는 특수한 문자
  + `\"` : 큰 따옴표
  + `\'` : 작은 따옴표
  + `\n` : 줄 바꿈(new line)
  + `\t` : 탭(tab)


```{python}
# 문자열 생성
print("안녕하세요")
print('Hello')
```

```{python}
# 문자열 내부에 따옴표 넣기
print('"안녕하세요"라고 말했습니다.')
print("'날씨가 좋다'라고 생각했습니다.")
```

```{python}
# 이스케이프 문자 사용1
print("\"안녕하세요\"라고 말했습니다.")
print('\'날씨가 좋다\'라고 생각했습니다.')
```

```{python}
# 이스케이프 문자 사용2
print("Hello\nWorld")
```

```{python}
# 이스케이프 문자 사용3
print("Hello\tWorld")
```

```{python}
# 여러 줄 문자열 만들기 : 세 번 반복한 따옴표로 감쌈
print("""동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산
대한사람 대한으로 길이 보전하세""")
```

### 2.5.2. 문자열 연산
+ 문자열 연결 연산자 `+` : 두 문자열을 연결해서 새로운 문자열 생성
+ 문자열 반복 연산자 `*` : 문자열을 숫자만큼 반복해서 출력 - (예) 문자열\*숫자

```{python}
# 문자열 연결
print("Hello " + "Wolrld")
```

```{python}
# 문자열 연결 연산자는 문자열과 숫자를 연결할 수 없음
#score = 99
#print("성적은" + score + "입니다.")
```

```{python}
# 문자열 연결 연산자로 문자열과 숫자를 연결하려면 숫자를 문자열로 변환해야 함
score = 99
print("성적은" + str(score) + "입니다.")
```

```{python}
# 문자열 반복
print("Hello " * 3)
```

### 2.5.3. 문자열 인덱싱과 슬라이싱
+ 문자열의 각 문자에 접근할 때 문자 위치인 인덱스(index)를 사용함
  + Python은 숫자를 0부터 세는 제로 인덱스(zero index) 유형을 사용함

<br>

+ 인덱싱(indexing)
  + `[index]`를 사용해서 문자열의 특정 위치에 있는 항목(문자)에 접근하는 것
  + 인덱스를 음수로 입력하면 뒤에서부터 순서대로 선택할 수 있음

<br>

+ 슬라이싱(slicing)
  + `[(start index):(stop index)]`를 이용해서 문자열의 일부 문자를 추출하는 것
  + 끝 인덱스는 포함하지 않으니 주의해야 함
  + 시작 인덱스를 생략하면 첫 번째 글자부터 추출하며, 끝 인덱스를 생략하면 가장 마지막 글자까지 추출함

<br>

![](./images/fig2-6.png){width=70%}

```{python}
# 문자열 인덱싱1
str = "안녕하세요"
print(str[0])
```

```{python}
# 문자열 인덱싱2
str = "안녕하세요"
print(str[-1])
```

```{python}
# 문자열 슬라이싱1
str = "안녕하세요"
print(str[0:2])
```

```{python}
# 문자열 슬라이싱2
str = "안녕하세요"
print(str[:2])
print(str[2:])
```

```{python}
# 문자열은 불변형 객체이므로 인덱스를 이용한 수정은 불가함
#str = "안녕하세요"
#str[2:5] = "하십니까"
#print(str)
```

```{python}
# 문자열을 변경하려면 새로운 문자열을 만들어야 함
str = "안녕하세요"
str = str[:2] + "하십니까"
print(str)
```

```{python}
# 문자열 거꾸로 출력하기
my_str = "Hello Python!"
print(my_str[::-1])
```

### 2.5.4. 문자열 함수
#### 2.5.4.1. 문자열 길이
+ `len()` 함수 : 문자열에 들어있는 문자의 개수(문자열의 길이) 반환

```{python}
# 문자열 길이
str = "안녕하세요"
print(len(str))
```

#### 2.5.4.2. 대소문자 변환

|함수|설명|
|:---:|:------------|
|lower()|문자열의 알파벳을 모두 소문자로 변환|
|upper()|문자열의 알파벳을 모두 대문자로 변환|

```{python}
# 대소문자 변환 : 원본은 변하지 않음
str = "Hello Python!"
print(str.lower())
print(str.upper())
print(str)
```

#### 2.5.4.3. 문자열 찾기
|함수|설명|
|:---:|:------------|
|find()|- 문자열에서 특정 문자열을 왼쪽에서부터 찾아서 인덱스를 반환 <br>- 찾는 문자열이 없으면 -1을 반환|
|rfind()|- 문자열에서 특정 문자열을 오른쪽에서부터 찾아서 인덱스를 반환 <br>- 찾는 문자열이 없으면 -1을 반환|
|count()|- 문자열에서 특정 문자열의 개수를 반환|
|in 연산자|- 문자열 내부에 특정 문자열이 있다면 True, 없다면 False를 반환|

```{python}
# 문자열 찾기
str = "Hello! Python is Python"
print(str.find("Python"))
print(str.rfind("Python"))
print(str.count("Python"))
print("Hello" in str)
print("Hi" in str)
```

#### 2.5.4.4. 공백 제거 및 문자열 변경

|함수|설명|
|:---:|:------------|
|strip()|문자열 양 옆의 공백이나 특정 문자를 제거|
|rstrip()|문자열 오른쪽의 공백이나 특정 문자를 제거|
|lstrip()|문자열 왼쪽의 공백이나 특정 문자를 제거|
|replace()|특정 문자열을 다른 문자열로 변경|

```{python}
# 공백 제거
str = "  Hello Python!  "
print(str)
print(str.strip())
```

```{python}
# 특정 문자 제거
str = "##100kg, ##200kg"
print(str.rstrip("kg"))
print(str.lstrip("#"))
```

```{python}
# 문자열 변경
str = "Hello Python!"
print(str.replace("Hello", "Hi"))
```

