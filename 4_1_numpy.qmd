---
title: 4. 라이브러리
jupyter: python3
---

## 4.1. NumPy 라이브러리
### 4.1.1. 넘파이 배열
#### 4.1.1.1. 넘파이 배열 소개
+ NumPy
  + Numerical Python의 약자로, C언어로 구현된 Python 라이브러리
  + 고성능 수치 계산, 대규모 다차원 배열 및 행렬 연산에 최적화

<br>

+ 넘파이 배열(ndarray)
  + 리스트처럼 데이터를 모아 저장하는 자료구조
  + **모든 원소가 동일한 자료형**으로 저장(효율적인 메모리 관리 및 빠른 연산)
  + 대규모 데이터 처리에 유리함
  + 반복문 없이 배열 간 연산이 가능한 브로드캐스팅 및 벡터화 연산 지원
  + 다양한 수학 함수, 선형대수, 난수 생성 기능 제공


<br>

#### 4.1.1.2. 넘파이 배열 생성

|함수|설명|
|:---:|:------------|
|np.array()|리스트, 튜플 등으로부터 배열 생성|
|np.zeros()|모든 값이 0인 배열 생성|
|np.ones()|모든 값이 1인 배열 생성|
|np.full()|지정한 값으로 이루어진 배열 생성|
|np.arange()|범위를 지정하여 연속적인 값의 배열 생성(range()와 비슷)|
|np.linspace()|시작과 끝을 기준으로, 지정한 개수만큼 일정 간격의 값으로 배열 생성|
|np.eye()|행과 열의 크기를 지정할 수 있는 단위행렬(2차원 배열) 생성|
|np.identity()|정방 단위행렬(2차원 배열) 생성|

```{python}
import numpy as np
```

```{python}
# 넘파이 배열 생성1
arr1 = np.array([1, 2, 3])
arr2 = np.array((6, 7, 8, 9))
print(arr1)
print(arr2)
```

```{python}
# 넘파이 배열 생성2
arr1 = np.zeros(5)
arr2 = np.ones(3)
arr3 = np.full(2, 5)
print(arr1)
print(arr2)
print(arr3)
```

```{python}
# 넘파이 배열 생성3
arr1 = np.arange(10)
arr2 = np.arange(3, 6)
arr3 = np.arange(1, 11, 2)
arr4 = np.arange(0, 1, 0.1)
print(arr1)
print(arr2)
print(arr3)
print(arr4)
```

```{python}
# 넘파이 배열 생성4
arr = np.linspace(0, 1, 5)
print(arr)
```

```{python}
# 넘파이 배열 생성5
arr1 = np.eye(3)
arr2 = np.eye(3, 4, k=1)
print(arr1)
print(arr2)
```

```{python}
# 넘파이 배열 생성6 : np.identity()는 np.eye()의 특수한 경우
arr = np.identity(4)
print(arr)
```

<br>

#### 4.1.1.3. 넘파이 배열의 속성

|속성|설명|
|:---:|:------------|
|.dtype|배열 원소의 자료형|
|.ndim|배열의 차원 수|
|.shape|배열의 모양(행, 열)|
|.size|배열의 전체 원소 개수|
|.itemsize|원소 하나의 메모리 크기|

```{python}
# 넘파이 배열의 속성
arr = np.array([[1, 2, 3], [4, 5, 6]])       # 2차원 배열
print(arr)
print(arr.dtype)
print(arr.ndim)
print(arr.shape)
print(arr.size)
print(arr.itemsize)
```

<br>

### 4.1.2. 차원과 축
#### 4.1.2.1. 차원(dimension)
+ 넘파이 배열의 차원
  + 관측하고자 하는 데이터의 속성의 수 또는 측정 항목의 수
  + **스칼라(scalar)** : 0차원 배열, 배열에서 값을 표현하는 가장 기본 단위로 하나의 실수를 저장할 수 있음
  + **벡터(vector)** : 1차원 배열, 스칼라 여러 개를 나열한 배열
  + **행렬(matrix)** : 2차원 배열, 1차원 배열을 여러 개 묶은 배열
  + **텐서(tensor)** : 3차원 이상의 배열, 벡터의 집합

<br>

![](./images/fig4-1.jpg){width=50%}

```{python}
arr0 = np.array(3.14)                        # 0차원 배열(스칼라)
arr1 = np.array([3.14])                      # 1차원 배열(벡터)
arr2 = np.array([[3.14]])                    # 2차원 배열(행렬)
arr3 = np.array([[[3.14]]])                  # 3차원 배열(텐서)

print(arr0.ndim, arr0.shape)
print(arr1.ndim, arr1.shape)
print(arr2.ndim, arr2.shape)
print(arr3.ndim, arr3.shape)
```

```{python}
# 1차원 배열(벡터)
arr = np.array([1, 2, 3])
print(arr.ndim)
print(arr.shape)
```

```{python}
# 2차원 배열(행렬)
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.ndim)
print(arr.shape)
```

```{python}
# 3차원 배열(텐서)
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[11, 12, 13], [14, 15, 16]]])
print(arr.ndim)
print(arr.shape)
```


<br>

#### 4.1.2.2. 축(axis)
+ 배열에서 데이터를 따라가는 방향
  + 차원이 있는 데이터에서 어느 방향으로 연산을 적용하는지 축으로 지정
+ axis 0은 첫 번째 차원으로, 배열의 가장 바깥쪽 차원임
  + 차원이 늘어날수록 새로운 축이 axis=0가 되며, 기존 축들은 번호가 하나씩 뒤로 밀림
+ 축 번호는 배열의 차원에 따라 증가하며, 각 축은 shape에서 해당하는 차원의 크기를 나타냄
  + 예 : shape (2, 3, 4) → axis 0: 2(면), axis 1: 3(행), axis 2: 4(열)

<br>

|차원|직관적인 구조|축의 역할|
|:---:|:------------|:------------|
|1차원|벡터 → [1, 2, 3, 4]|axis 0: 왼쪽 → 오른쪽|
|2차원|벡터들이 위아래로 쌓임 → 행렬|axis 0: 위 → 아래(행) <br>axis 1: 왼쪽 → 오른쪽(열)|
|3차원|행렬들이 앞뒤로 쌓임|axis 0: 앞 → 뒤(면) <br>axis 1: 위 → 아래(행) <br>axis 2: 왼쪽 → 오른쪽(열)|

<br>

![](./images/fig4-2.png){width=50%}

<br>

#### 4.1.2.3. 넘파이 배열 메소드

|함수|설명|
|:---:|:------------|
|sum()|합계|
|mean()|평균|
|std()|표준편차|
|min(), max()|최소값, 최대값|
|cumsum(), cumprod()|누적 합계, 누적 곱|
|transpose()|축 순서 변경|

```{python}
arr = np.array([
    [1, 2, 3],
    [4, 5, 6]
])

# 합계
print(np.sum(arr))
print(np.sum(arr, axis=0))
print(np.sum(arr, axis=1))
```

```{python}
# 누적합
print(np.cumsum(arr))
print(np.cumsum(arr, axis=0))
print(np.cumsum(arr, axis=1))
```

<br>

#### 4.1.2.4. 배열 형태 변환

|함수|설명|
|:---:|:------------|
|reshape()|배열을 데이터 변경없이 새로운 모양으로 변환|
|flatten()|다차원 배열을 1차원 배열로 복사하여 반환(원본 유지)|
|ravel()|다차원 배열을 1차원 배열로 반환(가능하면 원본 공유, 더 효율적)|

```{python}
# 1차원 배열 → 2차원 배열(3행 2열)
arr = np.array([1, 2, 3, 4, 5, 6])

print(arr.reshape(3, 2))
print(arr)                                 # arr 원본 값이 변하지 않음
```

```{python}
# 1차원 배열 → 3차원 배열
arr = np.arange(24)

print(arr.reshape(2, 3, 4))
print(arr)                                 # arr 원본 값이 변하지 않음
```

```{python}
# 2차원 배열 → 1차원 배열 (복사본 반환)
arr = np.array([
    [1, 2, 3],
    [4, 5, 6]
])

print(arr.flatten())
print(arr)                                 # arr 원본 값이 변하지 않음
```

```{python}
# 2차원 배열 → 1차원 배열 (가능하면 뷰 반환)
arr = np.array([
    [1, 2, 3],
    [4, 5, 6]
])

print(arr.ravel())
print(arr)                                 # arr 원본 값이 변하지 않음
```

#### 4.1.2.5. 축 재배열

|함수|설명|
|:---:|:------------|
|transpose()|배열의 축 순서 변환(2차원 배열의 경우 행/열 전치)|
|swqapaxes()|지정한 두 축의 순서를 교환|

```{python}
# 2차원 배열에서 transpose()
arr = np.array([
    [1, 2, 3],
    [4, 5, 6]
])

print(arr.transpose())
```

```{python}
# 3차원 배열에서 transpose()
arr = np.arange(24).reshape(2, 3, 4)

# 축 순서 바꾸기 : (0, 1, 2) → (1, 0, 2)
print(arr.transpose(1, 0, 2))
print(arr.transpose(1, 0, 2).shape)
```

```{python}
# 3차원 배열에서 axis 0과 axis 2 교환
arr = np.array([
    [[1, 2], [3, 4]],
    [[5, 6], [7, 8]]
])

print(np.swapaxes(arr, 0, 2))
print(np.swapaxes(arr, 0, 2).shape)
```

