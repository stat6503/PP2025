---
title: 4. 라이브러리
jupyter: python3
---

## 4.2. Pandas 라이브러리
### 4.2.1. 판다스 객체
#### 4.2.1.1. 판다스 객체 소개
+ Pandas
  + NumPy를 기반으로 만들어진 데이터 분석용 라이브러리
  + 레이블(label)로 식별되는 데이터를 쉽게 다룰 수 있도록 지원
  + 고성능 데이터 조작, 탐색, 전처리, 변환, 요약, 통계 연산 기능 제공
  + 주요 객체로는 Series(1차원), DataFrame(2차원), Index(레이블 관리 구조)가 있음

<br>

|객체|설명|
|:---:|:------------|
|Series|- 1차원 레이블이 붙은 배열로, 각 데이터에 고유한 인덱스가 있음 <br>- 모든 원소가 동일한 자료형으로 저장되며, 숫자, 문자열, bool 등 다양한 자료형을 지원|
|DataFrame|- 2차원 표 형태의 데이터 구조로, 행(row)과 열(column)로 구성됨 <br>- 각 열은 Series로 구성되어 있으며, 각 열이 서로 다른 자료형을 가질 수 있음 <br>- DataFrame은 정렬(같은 인덱스를 공유)된 Series 객체의 연속으로 볼 수 있음|
|Index|- 데이터에 레이블을 부여하는 객체로, 행 또는 열에 사용됨 <br>- 데이터 정렬, 선택, 결합 등을 효율적으로 할 수 있도록 지원|


<br>

#### 4.2.1.2. 판다스 객체 생성

|함수|설명|
|:---:|:------------|
|pd.Series()|1차원 Series 객체 생성|
|pd.DataFrame()|2차원 DataFrame 객체 생성|
|pd.Index()|Index 객체 생성|

```{python}
import numpy as np
import pandas as pd
```

```{python}
# Series 생성1 : 리스트 사용
s = pd.Series([1, 2, 3, 4, 5])
print(s)
```

```{python}
# Series 생성2 : 딕셔너리 사용
s = pd.Series({'a': 10, 'b': 20, 'c': 30})
print(s)
```

```{python}
# Series 생성3 : 인덱스 지정
s = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])
print(s)
```

```{python}
# DataFrame 생성1 : Series 사용
s = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])
df = pd.DataFrame(s, columns = ['value'])
print(df)
```

```{python}
# DataFrame 생성2 : 리스트 사용
lst = [['Alice', 22], ['Bob', 20], ['Charlie', 27]]
df = pd.DataFrame(lst, columns=['Name', 'Age'])
print(df)
```

```{python}
# DataFrame 생성3 : 딕셔너리 사용
dct = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [22, 20, 27]}
df = pd.DataFrame(dct)
print(df)
```

```{python}
# DataFrame 생성4 : 인덱스 및 열 이름 지정
data = [[101, 22], [102, 20], [103, 27]]
columns = ['ID', 'Age']
index = ['Alice', 'Bob', 'Charlie']
df = pd.DataFrame(data, columns=columns, index=index)
print(df)
```

```{python}
# Index 생성1 : 리스트 사용
idx = pd.Index(['a', 'b', 'c', 'd'])
print(idx)
```

```{python}
# Index 생성1 : range() 사용
idx = pd.Index(range(1, 6))
print(idx)
```

<br>

#### 4.2.1.3. 데이터프레임 속성

|속성|설명|
|:---:|:------------|
|.index|데이터프레임의 행 인덱스를 조회 및 변경|
|.columns|데이터프레임의 열 이름을 조회 및 변경|
|.dtypes|각 열의 자료형 확인|

```{python}
df = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Age': [25, 30, 35, 40, 28],
    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]
})
```

```{python}
print(df.index)
```

```{python}
print(df.columns)
```

```{python}
print(df.dtypes)
```

```{python}
df.index = ['a', 'b', 'c', 'd', 'e']
print(df)
```

```{python}
df.columns = ['Student Name', 'Student Age', 'Exam Score']
print(df)
```

<br>

#### 4.2.1.4. 데이터프레임 정보 조회

|함수|설명|
|:---:|:------------|
|head()|상위 n개의 행 출력(초기 값 n=5)|
|info()|기본 정보(행 개수, 열 개수, 데이터 자료형, 결측값 여부 등) 출력|
|describe()|수치형 데이터의 요약 통계량(평균, 표준편차 등) 제공|

```{python}
df = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Age': [25, 30, 35, 40, 28],
    'Score': [85.5, 90.3, 78.2, 88.9, 92.5]
})
```

```{python}
print(df.head())
```

```{python}
print(df.info())
```

```{python}
print(df.describe())
```

<br>

### 4.2.2. 데이터프레임 인덱싱과 슬라이싱
#### 4.2.2.1. 열 인덱싱과 슬라이싱
+ 열 이름을 사용하여 직접 선택
  + 여러 개의 열을 선택할 때는 열 이름을 리스트로 작성
+ `loc[:, ]` : 라벨(label) 기반 접근 방식
+ `iloc[:, ]` : 정수(integer) 기반 접근 방식

```{python}
df = pd.DataFrame({
    'A': [1, 2, 3],
    'B': [4, 5, 6],
    'C': [7, 8, 9],
    'D': [10, 11, 12]
}, index=['x', 'y', 'z'])
```

```{python}
# 열 인덱싱과 슬라이싱1 : 열 이름 사용
print(df['A'])                               # 열 이름
print(df[['A', 'C']])                        # 열 이름 리스트
```

```{python}
# 열 인덱싱과 슬라이싱2 : 라벨 기반 접근
print(df.loc[:, 'A'])                        # 열 이름
print(df.loc[:, ['A', 'C']])                 # 열 이름 리스트
print(df.loc[:, 'A':'B'])                    # 열 이름 슬라이싱
print(df.loc[:, 'B'::2])                     # 열 이름 스트라이딩
print(df.loc[:, [True, False, True, True]])  # bool 리스트
```

```{python}
# 열 인덱싱과 슬라이싱3 : 정수 기반 접근
print(df.iloc[:, 0])                         # 정수
print(df.iloc[:, [0, 3]])                    # 정수 리스트
print(df.iloc[:, range(2)])                  # range
print(df.iloc[:, 0:3])                       # 슬라이싱
print(df.iloc[:, 1::2])                      # 스트라이딩
```

<br>

#### 4.2.2.2. 행 인덱싱과 슬라이싱
+ `loc[, :]` : 라벨(label) 기반 접근 방식
+ `iloc[, :]` : 정수(integer) 기반 접근 방식

```{python}
# 행 인덱싱과 슬라이싱1 : 라벨 기반 접근
print(df.loc['x', ])                         # 인덱스 이름
print(df.loc[['x', 'y'], :])                 # 인덱스 이름 리스트
print(df.loc['x':'y', :])                    # 인덱스 이름 슬라이싱
print(df.loc['x'::1, :])                     # 인덱스 이름 스트라이딩
print(df.loc[[True, False, True], :])        # bool 리스트
print(df.loc[list(df['A'] < 3), :])          # bool 리스트
```

```{python}
# 행 인덱싱과 슬라이싱2 : 정수 기반 접근
print(df.iloc[0, :])                         # 정수
print(df.iloc[[0, 2], :])                    # 정수 리스트
print(df.iloc[range(2), :])                  # range
print(df.iloc[0:1, :])                       # 슬라이싱
print(df.iloc[1::2, :])                      # 스트라이딩
```

```{python}
# 행 인덱싱과 슬라이싱3 : 정수 기반 접근
print(df.iloc[0])                            # 정수
print(df.iloc[[0, 2]])                       # 정수 리스트
print(df.iloc[range(2)])                     # range
print(df.iloc[0:1])                          # 슬라이싱
print(df.iloc[1::2])                         # 스트라이딩
print(df.iloc[[True, False, True]])          # bool 리스트
```

